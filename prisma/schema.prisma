generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

model User {
  id         String            @id @default(uuid())
  auth0Id    String?           @unique
  email      String?           @unique
  name       String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now())
  recoveries RecoveryRequest[]
  Session    Session[]
  Viewport   Viewport[]
  wallets    Wallet[]
}

model Wallet {
  id        String    @id @default(uuid())
  userId    String
  balance   Float?    @default(0)
  meta      Json?
  createdAt DateTime? @default(now()) @db.Timestamp(6)

  ledger   LedgerEntry[]
  merchant Merchant[]    @relation("WalletMerchant")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model LedgerEntry {
  id          String    @id @default(uuid())
  walletId    String
  type        String
  amount      Float
  timestamp   DateTime? @default(now()) @db.Timestamp(6)
  description String?
  network     String?
  txHash      String?
  meta        Json?
  wallet      Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Guardian {
  id         String    @id @default(uuid())
  name       String?
  endpoint   String?
  pubKeyPem  String?
  policyJson Json?
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model RecoveryShare {
  id          String          @id @default(uuid())
  recoveryId  String
  guardianId  String?
  kind        String?
  shareData   String?
  fingerprint String?
  status      String?         @default("stored")
  createdAt   DateTime?       @default(now()) @db.Timestamp(6)
  recovery    RecoveryRequest @relation(fields: [recoveryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model RecoveryRequest {
  id               String          @id @default(uuid())
  userId           String
  nonce            String?
  tokenFingerprint String?
  expiresAt        DateTime?       @db.Timestamp(6)
  status           String?         @default("pending")
  meta             Json?
  createdAt        DateTime?       @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?       @default(now()) @updatedAt @db.Timestamp(6)
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shares           RecoveryShare[]
}

model TokenAudit {
  id         String    @id @default(uuid())
  recoveryId String?
  userId     String?
  event      String?
  ip         String?
  userAgent  String?
  payload    Json?
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
}

model Merchant {
  id                String   @id @default(uuid())
  name              String
  walletId          String
  settlementAccount String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)

  wallet  Wallet            @relation("WalletMerchant", fields: [walletId], references: [id], onDelete: Cascade)
  batches SettlementBatch[]
}

model SettlementBatch {
  id         String    @id @default(uuid())
  merchantId String?
  total      Float?
  date       DateTime? @db.Timestamp(6)
  status     String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Delegation {
  id                   String                 @id @default(uuid())
  viewportId           String
  actorUserId          String
  enabled              Boolean                @default(true)
  createdAt            DateTime               @default(now())
  expiresAt            DateTime?
  scopeId              String?
  updatedAt            DateTime               @default(now())
  fromWalletId         String?                @default("unknown_from_wallet")
  toWalletId           String?                @default("unknown_to_wallet")
  rights               String?                @default("read")
  DelegationScope      DelegationScope?       @relation(fields: [scopeId], references: [id])
  Viewport             Viewport               @relation(fields: [viewportId], references: [id])
  DelegationPermission DelegationPermission[]
}

model Pledge {
  id                  String        @id @default(uuid())
  status              PledgeStatus  @default(PENDING)
  terms               Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  initiatorViewportId String?
  resolvedAt          DateTime?
  PledgeParty         PledgeParty[]
}

model DelegationPermission {
  id               String         @id @default(cuid())
  delegationId     String
  permissionTypeId String
  Delegation       Delegation     @relation(fields: [delegationId], references: [id])
  PermissionType   PermissionType @relation(fields: [permissionTypeId], references: [id])
}

model DelegationScope {
  id          String       @id @default(cuid())
  code        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  Delegation  Delegation[]
}

model Endpoint {
  id                 String               @id @default(cuid())
  type               EndpointType
  name               String?
  config             Json
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  EndpointOnViewport EndpointOnViewport[]
  Fed                Fed[]
}

model EndpointOnViewport {
  viewportId String
  endpointId String
  settings   Json?
  Endpoint   Endpoint @relation(fields: [endpointId], references: [id])
  Viewport   Viewport @relation(fields: [viewportId], references: [id])

  @@id([viewportId, endpointId])
}

model Fed {
  id         String   @id @default(cuid())
  endpointId String
  fedTypeId  String
  amount     Decimal  @default(0)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  Endpoint   Endpoint @relation(fields: [endpointId], references: [id])
  FedType    FedType  @relation(fields: [fedTypeId], references: [id])

  @@unique([endpointId, fedTypeId])
}

model FedType {
  id           String       @id @default(cuid())
  name         String       @unique
  endpointType EndpointType
  scale        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  Fed          Fed[]
}

model PermissionType {
  id                   String                 @id @default(cuid())
  code                 String                 @unique
  description          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  DelegationPermission DelegationPermission[]
}

model PledgeParty {
  id         String     @id @default(cuid())
  pledgeId   String
  viewportId String
  role       PledgeRole
  obligation Json?
  rights     Json?
  Pledge     Pledge     @relation(fields: [pledgeId], references: [id])
  Viewport   Viewport   @relation(fields: [viewportId], references: [id])
}

model PolicyHook {
  id         String   @id @default(cuid())
  name       String
  version    String
  attachedTo String?
  config     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Session {
  id           String    @id @default(cuid())
  userId       String
  createdAt    DateTime  @default(now())
  accessToken  String?
  idToken      String?
  refreshToken String?
  expiresAt    DateTime?
  ipAddress    String?
  issuedAt     DateTime? @default(now())
  updatedAt    DateTime
  userAgent    String?
  User         User      @relation(fields: [userId], references: [id])
}

model Viewport {
  id                 String               @id @default(cuid())
  ownerId            String
  name               String
  type               ViewportType         @default(OWNER)
  parentId           String?
  policyJson         Json?
  createdAt          DateTime             @default(now())
  balanceCached      Decimal?             @default(0)
  updatedAt          DateTime             @updatedAt
  Delegation         Delegation[]
  EndpointOnViewport EndpointOnViewport[]
  PledgeParty        PledgeParty[]
  User               User                 @relation(fields: [ownerId], references: [id])
  Viewport           Viewport?            @relation("ViewportToViewport", fields: [parentId], references: [id])
  other_Viewport     Viewport[]           @relation("ViewportToViewport")
}

model WebhookEvent {
  id         String   @id @default(cuid())
  source     String
  payload    Json
  receivedAt DateTime @default(now())
}

enum EndpointType {
  ETH
  BANK
  MILES
  CUSTOM
}

enum PledgeRole {
  PLEDGOR
  BENEFICIARY
  GUARANTOR
  FED_AGENT
}

enum PledgeStatus {
  PENDING
  ACTIVE
  RELEASED
  DEFAULTED
  DISPUTED
}

enum ViewportType {
  OWNER
  DERIVED
  AGGREGATED
  PROCESSOR
  SETTLEMENT
}
